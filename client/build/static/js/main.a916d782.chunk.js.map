{"version":3,"sources":["views/Create.jsx","views/Dashboard.jsx","views/Details.jsx","views/Update.jsx","App.js","reportWebVitals.js","index.js"],"names":["Create","history","useHistory","useState","name","type","description","skill1","skill2","skill3","formState","setFormState","validState","setValidState","changeHandler","e","target","value","to","onSubmit","preventDefault","axios","post","then","res","push","catch","err","errors","response","data","errorObj","Object","entries","key","message","console","log","onChange","style","color","className","Dashboard","pets","setPets","useEffect","get","map","pet","idx","_id","Details","id","useParams","petState","setPetState","onClick","delete","Update","put","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a916d782.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React from 'react';\r\nimport { useState } from 'react';\r\nimport {useHistory, Link} from 'react-router-dom';\r\n\r\nconst Create = () => {\r\n    //will send you to already created routes in app.js\r\n    const history = useHistory()\r\n    //the form data as a whole object\r\n    const [formState, setFormState] = useState({\r\n        name : \"\",\r\n        type : \"\",\r\n        description : \"\",\r\n        skill1: \"\",\r\n        skill2: \"\",\r\n        skill3: \"\"\r\n    })\r\n    //for validations\r\n    const [validState, setValidState] = useState({})\r\n\r\n    const changeHandler = (e) => {\r\n        const {name, value} = e.target;\r\n        setFormState({\r\n            ...formState,\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        axios.post(\"http://localhost:8000/api/pets\", formState)\r\n            .then(res => {\r\n                //  //only resetting for successful response, if unsuccessful, data is saved in .catch to edit\r\n                // setFormState({\r\n                //     name : \"\",\r\n                //     type : -1,\r\n                //     description : \"\",\r\n                //     skill1: \"\",\r\n                //     skill2: \"\",\r\n                //     skill3: \"\"\r\n                // })\r\n                //match switch routes in app.js frontend \r\n                history.push(\"/\")\r\n            })\r\n            //errors object contains the validation msgs we want to display\r\n            .catch(err => {\r\n                //console.log(\"CATCH: \", err.response.data)\r\n                //capture error messages generated from backend\r\n                const {errors} = err.response.data\r\n                //empty error object which we will fill failed validation errors with\r\n                let errorObj = {}\r\n                //iterates thru errors object coming from backend and pulling keys and values out\r\n                for(let [key, value] of Object.entries(errors)) {\r\n                    //set key as failed attribute, set value as the message for failed validation\r\n                    errorObj[key] = value.message\r\n                }\r\n                console.log(errorObj)\r\n                setValidState(errorObj)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <fieldset>\r\n            <legend>Create.jsx</legend>\r\n            <h5><Link to={\"/\"}>Back to Home</Link></h5>\r\n            <h3>Know a pet needing a home?</h3>\r\n            <form onSubmit={submitHandler}>\r\n            <p>\r\n                <label>Pet Name:</label><br/>\r\n                <input type=\"text\" name=\"name\" onChange={changeHandler} value={formState.name}/>\r\n                {(validState.name) ? <p style={{color:\"red\"}}>{validState.name}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Type: </label><br/>\r\n                <input type=\"text\" name=\"type\" onChange={changeHandler} value={formState.type}/>\r\n                {(validState.type) ? <p style={{color:\"red\"}}>{validState.type}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Description: </label><br/>\r\n                <input type=\"text\" name=\"description\" onChange={changeHandler} value={formState.description}/>\r\n                {(validState.description) ? <p style={{color:\"red\"}}>{validState.description}</p> : null}\r\n            </p>\r\n            <h4>Skills &#40;Optional&#41;:</h4>\r\n            <p>\r\n                <label>Skill #1: </label><br/>\r\n                <input type=\"text\" name=\"skill1\" onChange={changeHandler} value={formState.skill1}/>\r\n                {(validState.skill1) ? <p style={{color:\"red\"}}>{validState.skill1}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Skill #2: </label><br/>\r\n                <input type=\"text\" name=\"skill2\" onChange={changeHandler} value={formState.skill2}/>\r\n                {(validState.skill2) ? <p style={{color:\"red\"}}>{validState.skill2}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Skill #3: </label><br/>\r\n                <input type=\"text\" name=\"skill3\" onChange={changeHandler} value={formState.skill3}/>\r\n                {(validState.skill3) ? <p style={{color:\"red\"}}>{validState.skill3}</p> : null}\r\n            </p>\r\n            <input className=\"btn btn-secondary\" type=\"submit\" value=\"Add Pet!\"/>\r\n\r\n            </form>\r\n            <br/>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\nexport default Create","import React from 'react'\r\nimport axios from 'axios'\r\nimport {useEffect, useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Dashboard = () => {\r\n    //read all - need empty array to hold info\r\n    const [pets, setPets] = useState([])\r\n    //boolean to go into 2nd argument\r\n    // const [state, setState] = useState(false)\r\n\r\n    useEffect( () => {\r\n        axios.get('http://localhost:8000/api/pets')\r\n            .then(res => setPets(res.data))\r\n            .catch(err => console.log(err))\r\n    }, []) //include second argument in useEffect to retrieve new list  \r\n\r\n    // const deleteHandler = (id) => {\r\n    //     axios.delete(`http://localhost:8000/api/pets/${id}`)\r\n    //         //successful response set to opposite of state to trigger rerender with new info from db\r\n    //         .then(res => setState(!state)) //can maybe use history.push, but it is on the same page \r\n    //         .catch(err => console.log(err))\r\n    // }\r\n    //LINE 38: Must wrap within arrow function to pass in variable so as to not execute function immediately\r\n    return (\r\n        <fieldset>\r\n            <legend>Dashboard.jsx</legend>\r\n            <h3>These pets are looking for a good home</h3>\r\n            <h4><Link to={\"/pets/new\"}>Add a pet to the shelter</Link></h4>\r\n                <table className=\"table table-bordered table-striped table-dark\">\r\n                    <thead>\r\n                        <th>Pet Name: </th>\r\n                        <th>Pet Type: </th>\r\n                        <th>Actions: </th>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                    pets.map((pet, idx) => {\r\n                        return(\r\n                        <>\r\n                            <tr key = {idx}>    \r\n                                <td> {pet.name}</td>\r\n                                <td> {pet.type}</td>\r\n                                <td> \r\n                                    <Link to={`/pets/${pet._id}`}>\r\n                                        Details\r\n                                    </Link>&nbsp;&nbsp;|&nbsp;&nbsp;\r\n                                    <Link to={`/pets/${pet._id}/edit`}>\r\n                                        Edit\r\n                                    </Link>&nbsp;&nbsp;&nbsp;\r\n                                </td>          \r\n                            </tr>\r\n                        </>\r\n                        )\r\n                    })\r\n                }\r\n                        <br/>\r\n                    </tbody>\r\n                </table>         \r\n            <br/>\r\n        </fieldset>\r\n                        )\r\n}\r\n\r\nexport default Dashboard\r\n","//any calls to database\r\nimport axios from 'axios'\r\nimport React from 'react'\r\n//any read functionality will need:\r\nimport {useEffect, useState} from 'react';\r\n//if we use /:path variable in app.js we need to useParams to pullout variable\r\nimport { useParams, Link, useHistory } from 'react-router-dom';\r\n\r\nconst Details = () => {\r\n\r\n    //ABSOLUTELY MUST MATCH :PATH VARIABLE IN REACT ROUTER\r\n    //we deconstruct the path variable 'id' so we can string interpolate it\r\n    const {id} = useParams()\r\n    const history = useHistory()                //using to make sure all renders at once in return statement\r\n    const [petState, setPetState] = useState(null)\r\n    \r\n    //using deconstructed 'id' and useParams we can string interpolate \r\n    useEffect( () => {\r\n        axios.get(`http://localhost:8000/api/pets/${id}`)\r\n            .then(res => setPetState(res.data))\r\n            .catch(err => console.log(err))\r\n\r\n    }, [])\r\n\r\n    const deleteHandler = () => {\r\n        axios.delete(`http://localhost:8000/api/pets/${id}`)\r\n            .then(res => history.push(\"/\"))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {   (petState) ?\r\n            <fieldset>\r\n                <legend>Details.jsx</legend>\r\n                <h4><Link to={\"/\"}>Back to Home</Link></h4>\r\n                <h3>Details about:&nbsp;{petState.name}</h3>\r\n                <div>\r\n                    <h4>Pet type:&nbsp;&nbsp;{petState.type}</h4>\r\n                    <h4>Description:&nbsp;&nbsp;{petState.description}</h4>\r\n                    <br/>\r\n                    <h4>Skills:</h4>\r\n                    <h5>{petState.skill1}</h5>  \r\n                    <h5>{petState.skill2}</h5>  \r\n                    <h5>{petState.skill3}</h5>  \r\n                    <br/>\r\n                    {/* <Link to={`/pets/${petState._id}/edit`}>Edit</Link>\r\n                    &nbsp;&nbsp;|&nbsp;&nbsp; */}\r\n                    <button className=\"btn btn-danger\" onClick={deleteHandler}>Adopt&nbsp;{petState.name} </button>\r\n                </div>\r\n            </fieldset> : <h1>Loading...</h1>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport {useParams, useHistory, Link} from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nconst Update = () => {\r\n    \r\n    const {id} = useParams()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pets/${id}`)\r\n            .then(res => setFormState(res.data))\r\n            .catch(err => console.log(err))\r\n        }, [])\r\n    //the form data as a whole object\r\n    const [formState, setFormState] = useState({\r\n        name : \"\",\r\n        type : \"\",\r\n        description : \"\",\r\n        skill1: \"\",\r\n        skill2: \"\",\r\n        skill3: \"\"\r\n    })\r\n\r\n         //for validations\r\n    const [validState, setValidState] = useState({})\r\n\r\n    const changeHandler = (e) => {\r\n        const {name, value} = e.target;\r\n        setFormState({\r\n            ...formState,\r\n            [name] : value\r\n        })\r\n    }\r\n    //mostly copied from create with some changes\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        //request to update - all form info stored in formState\r\n        axios.put(`http://localhost:8000/api/pets/${id}`, formState)\r\n            //if successful\r\n            .then(res => {\r\n                    //  //only resetting for successful response, if unsuccessful, data is saved in .catch to edit\r\n                    //  setFormState({\r\n                    //     title : \"\",\r\n                    //     price : -1,\r\n                    //     description : \"\"\r\n                    // })\r\n                history.push(`/pets/${id}`)\r\n            })\r\n            //errors object contains the validation msgs we want to display\r\n            //the same as create \r\n            .catch(err => {\r\n                console.log(\"CATCH: \", err.response.data)\r\n                //capture error messages generated from backend\r\n                const {errors} = err.response.data\r\n                //empty error object which we will fill failed validation errors with\r\n                let errorObj = {}\r\n                //iterates thru errors object coming from backend and pulling keys and values out\r\n                for(let [key, value] of Object.entries(errors)) {\r\n                    //set key as failed attribute, set value as the message for failed validation\r\n                    errorObj[key] = value.message\r\n                }\r\n                console.log(errorObj)\r\n                setValidState(errorObj)\r\n            })\r\n    }\r\n\r\n    \r\n    return (\r\n        <fieldset>\r\n            <legend>Update.jsx</legend>\r\n            <h5><Link to={\"/\"}>Back to Home</Link></h5>\r\n            <h3>Edit {formState.name}</h3>\r\n            <form onSubmit={submitHandler}>\r\n            <p>\r\n                <label>Pet Name:</label><br/>\r\n                <input type=\"text\" name=\"name\" onChange={changeHandler} value={formState.name}/>\r\n                {(validState.name) ? <p style={{color:\"red\"}}>{validState.name}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Type: </label><br/>\r\n                <input type=\"text\" name=\"type\" onChange={changeHandler} value={formState.type}/>\r\n                {(validState.type) ? <p style={{color:\"red\"}}>{validState.type}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Description: </label><br/>\r\n                <input type=\"text\" name=\"description\" onChange={changeHandler} value={formState.description}/>\r\n                {(validState.description) ? <p style={{color:\"red\"}}>{validState.description}</p> : null}\r\n            </p>\r\n            <h4>Skills &#40;Optional&#41;:</h4>\r\n            <p>\r\n                <label>Skill #1: </label><br/>\r\n                <input type=\"text\" name=\"skill1\" onChange={changeHandler} value={formState.skill1}/>\r\n                {(validState.skill1) ? <p style={{color:\"red\"}}>{validState.skill1}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Skill #2: </label><br/>\r\n                <input type=\"text\" name=\"skill2\" onChange={changeHandler} value={formState.skill2}/>\r\n                {(validState.skill2) ? <p style={{color:\"red\"}}>{validState.skill2}</p> : null}\r\n            </p>\r\n            <p>\r\n                <label>Skill #3: </label><br/>\r\n                <input type=\"text\" name=\"skill3\" onChange={changeHandler} value={formState.skill3}/>\r\n                {(validState.skill3) ? <p style={{color:\"red\"}}>{validState.skill3}</p> : null}\r\n            </p>\r\n            <input className=\"btn btn-warning\" type=\"submit\" value=\"Update Pet!\" />\r\n\r\n            </form>\r\n            <br/>\r\n        </fieldset>\r\n    )\r\n}\r\n\r\nexport default Update","import './App.css';\nimport Create from './views/Create';\nimport {Switch, Route} from 'react-router-dom'\nimport Dashboard from './views/Dashboard';\nimport Details from './views/Details';\nimport Update from './views/Update';\n\nfunction App() {\n //REMEMBER THAT EXACT PATHS GO INSIDE ROUTES!!! NOT THE VIEW OR COMPONENT ITSELF!!!\n  //if you have :var you'll need user params\n  return (\n    <fieldset>\n      <legend>App.jsx</legend>\n      <div className=\"App\">\n        <h1>Pet Shelter</h1>\n        <hr/>\n        <Switch>\n          <Route exact path=\"/\">\n            <Dashboard  />\n          </Route>\n          <Route exact path=\"/pets/new\">\n            <Create/>\n          </Route>\n          <Route exact path=\"/pets/:id\">\n            <Details/>\n          </Route>\n          <Route exact path=\"/pets/:id/edit\">\n            <Update/>\n          </Route>\n        </Switch>\n        </div>\n    </fieldset>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}